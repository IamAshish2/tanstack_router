/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ContactLazyImport = createFileRoute('/contact')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const AuthIndexLazyImport = createFileRoute('/auth/')()
const AuthUserIndexLazyImport = createFileRoute('/auth/user/')()
const AuthUserLoginLazyImport = createFileRoute('/auth/user/login')()

// Create/Update Routes

const ContactLazyRoute = ContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))

const AuthUserIndexLazyRoute = AuthUserIndexLazyImport.update({
  id: '/auth/user/',
  path: '/auth/user/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/user/index.lazy').then((d) => d.Route),
)

const AuthUserLoginLazyRoute = AuthUserLoginLazyImport.update({
  id: '/auth/user/login',
  path: '/auth/user/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/user/login.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/user/login': {
      id: '/auth/user/login'
      path: '/auth/user/login'
      fullPath: '/auth/user/login'
      preLoaderRoute: typeof AuthUserLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/user/': {
      id: '/auth/user/'
      path: '/auth/user'
      fullPath: '/auth/user'
      preLoaderRoute: typeof AuthUserIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/auth': typeof AuthIndexLazyRoute
  '/auth/user/login': typeof AuthUserLoginLazyRoute
  '/auth/user': typeof AuthUserIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/auth': typeof AuthIndexLazyRoute
  '/auth/user/login': typeof AuthUserLoginLazyRoute
  '/auth/user': typeof AuthUserIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/auth/': typeof AuthIndexLazyRoute
  '/auth/user/login': typeof AuthUserLoginLazyRoute
  '/auth/user/': typeof AuthUserIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/auth'
    | '/auth/user/login'
    | '/auth/user'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/contact' | '/auth' | '/auth/user/login' | '/auth/user'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/auth/'
    | '/auth/user/login'
    | '/auth/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
  AuthUserLoginLazyRoute: typeof AuthUserLoginLazyRoute
  AuthUserIndexLazyRoute: typeof AuthUserIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  AuthIndexLazyRoute: AuthIndexLazyRoute,
  AuthUserLoginLazyRoute: AuthUserLoginLazyRoute,
  AuthUserIndexLazyRoute: AuthUserIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/contact",
        "/auth/",
        "/auth/user/login",
        "/auth/user/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.lazy.tsx"
    },
    "/auth/user/login": {
      "filePath": "auth/user/login.lazy.tsx"
    },
    "/auth/user/": {
      "filePath": "auth/user/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
